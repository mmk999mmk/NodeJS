npm install -g nodemon -- if we save the file it will automatically restart the server.
----------------------------------------------------------------------------------------
app.use(express.json())
db.all()
db.get()
db.run()

const dbRes = await db.run(getBookQuery);
const bookId = dbRes.lastID
----------------------------------------------------------------------
const express = require("express");
const path = require("path");

const { open } = require("sqlite");
const sqlite3 = require("sqlite3");

const app = express();
app.use(express.json());
const dbPath = path.join(__dirname, "goodreads.db");

let db = null;

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (e) {
    console.log(`DB Error: ${e.message}`);
    process.exit(1);
  }
};
initializeDBAndServer();
--------------------------------------------------------
// Get Books API
app.get("/books/", async (request, response) => {
  const getBooksQuery = `
    SELECT
      *
    FROM
      book
    ORDER BY
      book_id;`;
  const booksArray = await db.all(getBooksQuery);
  response.send(booksArray);
});
-------------------------------------------------------------
//Get Book API
app.get("/books/:bookId/", async (request, response) => {
  const { bookId } = request.params;
  const getBookQuery = `
    SELECT
      *
    FROM
      book
    where
      book_id=${bookId};`;
  const book = await db.get(getBookQuery);
  response.send(book);
});
------------------------------------------------------------------
//insert Book API
app.post("/books/", async (request, response) => {
  const bookDetails = request.body;
  const {
    title,
    authorId,
    rating,
    ratingCount,
    reviewCount,
    description,
    pages,
    dateOfPublication,
    editionLanguage,
    price,
    onlineStores,
  } = bookDetails;
  const getBookQuery = `
    insert into book (
  title,
  author_id,
  rating,
  rating_count,
  review_count,
  description,
  pages,
  date_of_publication,
  edition_language,
  price,
  online_stores)
      values('${title}',
  ${authorId},
   ${rating},
    ${ratingCount},
    ${reviewCount},
    '${description}',
    ${pages},
    '${dateOfPublication}',
    '${editionLanguage}',
    ${price},
   '${onlineStores}');`;
  const dbRes = await db.run(getBookQuery);
  const bookId = dbRes.lastID;
  response.send({ bookId: bookId });
});
---------------------------------------------------------------
//update Book API
app.put("/books/:bookId", async (request, response) => {
  const { bookId } = request.params;
  const bookDetails = request.body;
  const {
    title,
    authorId,
    rating,
    ratingCount,
    reviewCount,
    description,
    pages,
    dateOfPublication,
    editionLanguage,
    price,
    onlineStores,
  } = bookDetails;
  const updateBookQuery = `
    update book set
  title='${title}',
  author_id=${authorId},
  rating=${rating},
  rating_count=${ratingCount},
  review_count=${reviewCount},
  description='${description}',
  pages=${pages},
  date_of_publication='${dateOfPublication}',
  edition_language='${editionLanguage}',
  price= ${price},
  online_stores='${onlineStores}'
  where book_id=${bookId};`;
  const dbRes = await db.run(updateBookQuery);
  response.send("book updated successfully");
});
-----------------------------------------------------------------
//delete book api
app.delete("/books/:bookId", async (request, response) => {
  const { bookId } = request.params;
  const deletebook = `
  delete from book where book_id=${bookId}
  ;`;
  const dbRes = await db.run(deletebook);
  response.send("book deleted successfully");
});
---------------------------------------------------------------------
//Get author API
app.get("/authors/:authorId/books", async (request, response) => {
  const { authorId } = request.params;
  const getauthorQuery = `
    SELECT
      *
    FROM
      book
    where
      author_id=${authorId};`;
  const book = await db.all(getauthorQuery);
  response.send(book);
});
